theory Constrained_Until
  imports Always
begin

definition constrained_until where "constrained_until s s1 t A1 A2 \<equiv>
toEnvNum s1 s \<ge> t \<longrightarrow>
(\<exists> r2. toEnvP r2 \<and> s1 \<le> r2 \<and> r2 \<le> s \<and> toEnvNum s1 r2 \<le> t \<and> A2 s r2 \<and>
(\<forall> r1. toEnvP r1 \<and> s1 \<le> r1 \<and> r1 < r2 \<longrightarrow> A1 s r1))"

definition constrained_until_inv where "constrained_until_inv s s1 t t1 A1' A2' \<equiv>
(\<exists> r2. toEnvP r2 \<and> s1 \<le> r2 \<and> r2 \<le> s \<and> toEnvNum s1 r2 \<le> t \<and> A2' s r2 \<and>
(\<forall> r1. toEnvP r1 \<and> s1 \<le> r1 \<and> r1 < r2 \<longrightarrow> A1' s r1)) \<or>
toEnvNum s1 s < t1 s \<and>
(\<forall> r1. toEnvP r1 \<and> s1 \<le> r1 \<and> r1 \<le> s \<longrightarrow> A1' s r1)"

lemma constrained_until_rule: "
consecutive s s' \<Longrightarrow>
always_imp s (A1' s) (A1' s') \<and>
always_imp s (A2' s) (A2' s') \<and>
 (t1 s = 0 \<or> A2' s' s' \<and> t1 s \<le> t \<or> A1' s' s' \<and> t1 s < t1 s') \<Longrightarrow>
always_imp s (\<lambda> s1. constrained_until_inv s s1 t t1 A1' A2') (\<lambda> s1. constrained_until_inv s' s1 t t1 A1' A2')"
  apply(unfold constrained_until_inv_def always_imp_def)
    unfolding less_eq_state.simps less_state.simps
  apply(rule allI)
  subgoal for s1
    apply(rule impI)
    apply(erule conjE)+
    apply(rotate_tac -1)
    apply(erule disjE)
     apply (metis consecutive.simps substate_trans)

 